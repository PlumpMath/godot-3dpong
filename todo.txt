
#wip#- implement menus. (see doc/planned_features.txt)
	[x]- make menu cursor move
	[x]- make control options selectable
	[x]- use global variables to store the options
	[x]- read these global variables and setup the InputHandler scripts in the "Pong.gd" script
	[x]- use Node.replace_by() to replace the paddle's InputHandler node with one that has the appropriate script.
	
	- load SingleScreen or SplitScreen scene depending on if Player 2 is an NPC.
	
	- make a 3d logo? "3D Pong", swapping out the word "Pong" for "Breakout" when the player flips the game mode option.
~


- write imperfect paddle AI scripts!

#wip#- implement the different InputHandler scripts (see doc/planned_features.txt)
	[x]- Mouse
	[x]- Keyboard_wasd
	[x]- keyboard_arrow_keys
	[x]- Gamepad1_left_stick  (d-pad will also work)
	[x]- Gamepad1_right_stick (face buttons will also work)
	[x]- Gamepad2_left_stick  (d-pad will also work)
	[x]- Gamepad2_right_stick (face buttons will also work)
	- CPU_weak
	- CPU_medium
	- CPU_strong
	[x]- CPU_perfect
~


[x]- add fullscreen hotkey (F11) and quit via alt+F4. -> quit via alt+F4 should work as-is. but I added a (commented out) handler anyway.

- fix browser mouse input?

- make breakout scene & multiple stage subscenes.

- make sound effects and add them. (how does sound work in godot? look at platformer demo)
	- we will need sound effects for the following things:
	
	paddle_hit1 (lower pitched, for paddle 1)
	paddle_hit2 (higher pitched, for paddle 2)
	wall_hit
	block_hit (for breakout mode) (maybe multiple ones, depending on block color?)
~

- limit maximum angle of the ball to prevent it from taking a long time to reach the other side of the playing field.


- joystick dead zone handling should be combined for both axis. (make them a Vector2 and check dead zone based on the vector's length) (make a test program for this first!)


- probably won't do this because it will be unnecessary after implementing the maximum angle limit:
- add 2 switchable physics modes for the ball (after implementing breakout, won't need to do double the scripting work that way):
	- "Realistic Mode": which does proper reflection calculations when the ball hits something (currently implemented as default.)
	
	- "Pong Mode": which ignores proper physics and simply handles all the axis' separately. (i.e.: collision on X axis -> velocity.X gets negated.)
~
